@page "/uploadfromurl"
@using Microsoft.EntityFrameworkCore
@using SaveHere.Models
@using SaveHere.Models.db

@* @rendermode @(new InteractiveServerRenderMode(true)) *@
@rendermode InteractiveServer
@attribute [StreamRendering]

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Upload From URL</PageTitle>

<MudStack>

  <MudPaper Class="px-5 pt-4 mx-5 mt-5" Elevation="5">

    <MudStack Row>

      <MudTextField @bind-Value="UrlText" Label="File URL" Variant="Variant.Outlined" Margin="Margin.Dense"
                    HelperText="Enter The File URL To Upload To The Server" HelperTextOnFocus="true" Adornment="Adornment.End"
                    AdornmentIcon="@Icons.Material.Filled.InsertLink" AdornmentColor="Color.Info" Clearable="true"
                    Immediate="true" />

      <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary"
                 Style="text-transform:none; height:40px; margin-top:0.5rem;" Size="Size.Small" OnClick="AddURL">Add</MudButton>

    </MudStack>

  </MudPaper>

  @if (!string.IsNullOrWhiteSpace(ErrorMessage))
  {
    <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Elevation="10" ContentAlignment="HorizontalAlignment.Center" Class="mx-5" ShowCloseIcon="true" CloseIconClicked="ClearErrorMessage">
      @ErrorMessage
    </MudAlert>
  }

  <MudTable Items="@_fileDownloadQueueItems" Dense="true" Hover="true" Loading="@_isLoadingTheList" Class="pa-5 mx-5" Elevation="5">
    <ColGroup>
      <col style="width: 60%" />
      <col style="width: 10%" />
      <col style="width: 10%" />
      <col style="width: 20%" />
    </ColGroup>
    <HeaderContent>
      <MudTh>URL</MudTh>
      <MudTh>Status</MudTh>
      <MudTh>Progress</MudTh>
      <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd DataLabel="URL" Style="word-break:break-all;">
        @context.InputUrl
      </MudTd>
      <MudTd DataLabel="Status">@context.Status</MudTd>
      <MudTd DataLabel="Progress">
        <MudProgressLinear Value="@context.ProgressPercentage" Color="Color.Tertiary" Striped="true" Class="mt-3">
          <MudText Typo="Typo.body2" Color="Color.Inherit" Class="mb-5">
            <b>@context.ProgressPercentage%</b>
          </MudText>
        </MudProgressLinear>
      </MudTd>
      <MudTd DataLabel="Actions">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="() => PauseDownload(context)">Pause</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" OnClick="() => ResumeDownload(context)">Resume</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="() => CancelDownload(context)">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick="() => ToggleMoreOptions(context)">More</MudButton>
      </MudTd>
    </RowTemplate>
    <ChildRowContent>
      @if (context.ShowMoreOptions)
      {
        <MudTr>
          <MudTd ColSpan="4">
            <MudPaper Class="pa-4" Elevation="0">
              <MudStack>
                <MudTextField T="string" Label="Option 1" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudTextField T="string" Label="Option 2" Variant="Variant.Outlined" Margin="Margin.Dense" />
              </MudStack>
            </MudPaper>
          </MudTd>
        </MudTr>
      }
    </ChildRowContent>
  </MudTable>

</MudStack>

@code {
  [Inject] public required AppDbContext _context { get; set; }
  [Inject] private PersistentComponentState _persistentState { get; set; } = default!;

  public string UrlText { get; set; } = "";
  public string ErrorMessage { get; set; } = "";

  private List<FileDownloadQueueItem> _fileDownloadQueueItems = new();
  private bool _isLoadingTheList = false;

  protected override async Task OnInitializedAsync()
  {
    _persistentState.RegisterOnPersisting(PersistItems);

    if (_persistentState.TryTakeFromJson<List<FileDownloadQueueItem>>(nameof(_fileDownloadQueueItems), out var savedItems) && savedItems != null)
    {
      _fileDownloadQueueItems = savedItems;
    }
    else
    {
      await LoadDownloadItemsList();
    }
  }

  private Task PersistItems()
  {
    _persistentState.PersistAsJson(nameof(_fileDownloadQueueItems), _fileDownloadQueueItems);
    return Task.CompletedTask;
  }

  private async Task LoadDownloadItemsList()
  {
    try
    {
      _isLoadingTheList = true;
      await Task.Delay(2000); // temp temp temp Remove this later!
      _fileDownloadQueueItems = await _context.FileDownloadQueueItems.ToListAsync();
    }
    catch (Exception exception)
    {
      ErrorMessage = $"An Error Occurred While Getting Items List: {exception.Message}";
    }
    finally
    {
      _isLoadingTheList = false;
    }
  }

  public async Task AddURL()
  {
    if (!string.IsNullOrWhiteSpace(UrlText))
    {
      try
      {
        var newFileDownload = new FileDownloadQueueItem() { InputUrl = UrlText };
        _context.FileDownloadQueueItems.Add(newFileDownload);
        await _context.SaveChangesAsync();

        ClearErrorMessage();

        await LoadDownloadItemsList();
      }
      catch (Exception exception)
      {
        ErrorMessage = $"An Error Occurred While Adding The URL: {exception.Message}";
      }
    }
    else
    {
      ErrorMessage = "Please Enter A Valid URL";
    }

    UrlText = "";
  }

  public void ClearErrorMessage()
  {
    ErrorMessage = "";
  }

  private void PauseDownload(FileDownloadQueueItem item)
  {
    // Implement pause functionality
  }

  private void ResumeDownload(FileDownloadQueueItem item)
  {
    // Implement resume functionality
  }

  private void CancelDownload(FileDownloadQueueItem item)
  {
    // Implement cancel functionality
  }

  private void ToggleMoreOptions(FileDownloadQueueItem item)
  {
    item.ShowMoreOptions = !item.ShowMoreOptions;
  }

}
