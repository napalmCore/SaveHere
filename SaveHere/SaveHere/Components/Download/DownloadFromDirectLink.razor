@implements IAsyncDisposable

@using Microsoft.EntityFrameworkCore
@using SaveHere.Components.Utility
@using SaveHere.Models
@using SaveHere.Models.db
@using SaveHere.Services
@using SaveHere.Helpers
@using System.Net
@using System.Diagnostics
@using Microsoft.AspNetCore.SignalR.Client

@rendermode InteractiveServer
@attribute [StreamRendering]

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<LoadingIndicator IsLoaded="_isFullyLoaded">
  <MudPaper Class="px-5 pt-4 mx-5 mt-5 sv-paper" Elevation="5">

    <MudStack Row>

      <MudTextField @bind-Value="UrlText" Label="File URL" Variant="Variant.Outlined" Margin="Margin.Dense"
                    HelperText="Enter The File URL To Upload To The Server" HelperTextOnFocus="true" Adornment="Adornment.End"
                    AdornmentIcon="@Icons.Material.Filled.InsertLink" AdornmentColor="Color.Info" Clearable="true"
                    Immediate="true" @onkeydown="HandleUrlInputKeyDown" TextUpdateSuppression="false" />

      <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled"
                      Style="text-transform:none; box-shadow: none !important; height:40px; margin-top:0.5rem; margin-left:0.5rem;">
        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="AddURL"
                   Size="Size.Small" Style="height:40px;">Add</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Info" OnClick="ShowInfo"
                   Size="Size.Small" Style="height:40px;">Info</MudButton>
      </MudButtonGroup>

    </MudStack>

    <MudStack id="my-mudstack-row-1" Row>
      <MudCheckBox @bind-Value="_autoStartPausedDownloads"
                   Label="Autostart Paused Downloads"
                   Color="Color.Primary"
                   T="bool" />

      <MudNumericField @bind-Value="_maxAutoStartConcurrency"
                       Label=""
                       HelperText="Maximum downloads to start concurrently"
                       Min="1"
                       Max="10"
                       Variant="Variant.Outlined"
                       Margin="Margin.Dense" />
    </MudStack>

    <MudStack id="my-mudstack-row-1" Row>
      <MudCheckBox @bind-Value="_useMaxDownloadSpeedLimit"
                   Label="Add speed limit to download"
                   Color="Color.Primary"
                   T="bool" />

      <MudNumericField @bind-Value="_maxBytesPerSecond"
                       Label=""
                       HelperText="Speed limit(Maximum bytes per second)"
                       Min="10000"
                       Variant="Variant.Outlined"
                       Margin="Margin.Dense" />
    </MudStack>

    <MudStack id="my-mudstack-row-1" Row Class="mt-3">
      <MudTextField @bind-Value="DownloadFolderName"
                    Label="Download Folder Name (Optional)"
                    Variant="Variant.Outlined"
                    Margin="Margin.Dense"
                    HelperText="Enter a folder name to save the download in. Will be created if it doesn't exist."
                    Clearable="true" />
    </MudStack>

  </MudPaper>

  @if (!string.IsNullOrWhiteSpace(ErrorMessage))
  {
    <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Elevation="10" ContentAlignment="HorizontalAlignment.Center" Class="mt-3 mx-5" ShowCloseIcon="true" CloseIconClicked="ClearErrorMessage">
      @ErrorMessage
    </MudAlert>
  }

  @if (_fileDownloadQueueItems is not null && _fileDownloadQueueItems.Any())
  {
    <MudPaper Class="pa-5 mx-5 mt-3 sv-paper" Elevation="5">
      <div style="display:flex; justify-content:end; width:100%">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(async () => await LoadDownloadItemsList())" Class="mb-4 mt-2" StartIcon="@Icons.Material.Filled.Refresh">
          Refresh
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="DeleteSelectedFileDownloadQueueItems" Class="mb-4 mx-3 mt-2" StartIcon="@Icons.Material.Filled.DeleteForever">
          Delete Selected
        </MudButton>
      </div>

      <MudTable Items="@_fileDownloadQueueItems" Dense Hover MultiSelection Loading="@_isLoadingTheList" Class="sv-table" Elevation="0" @bind-SelectedItems="SelectedItems">
        <HeaderContent>
          <MudTh Style="width:100%;">URL</MudTh>
          <MudTh Style="text-align:center; min-width:125px;">Status</MudTh>
          <MudTh Style="text-align:center; min-width:200px;">Progress</MudTh>
          <MudTh Style="text-align:center;">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
          <MudTd Style="word-break:break-all;" DataLabel="URL" Class="sv-table-custom-row-1">
            @context.InputUrl
          </MudTd>
          <MudTd Style="text-align:center;" Class="sv-table-custom-row-1" DataLabel="Status">@context.Status</MudTd>
          <MudTd Style="text-align:center" class="sv-table-custom-row-1" DataLabel="Progress">
            <MudStack Spacing="0" Class="sv-custom-progress-stack">

              <div style="display:flex; justify-content:space-between;">
                <span style="font-size:0.66rem;">speed</span>
                <MudText Typo="Typo.body2" Align="Align.Left" Class="ma-0 pa-0" Style="white-space:nowrap">
                  @Helpers.FormatSpeed(context.CurrentDownloadSpeed)
                </MudText>
              </div>

              <MudStack Row="true" Spacing="1" Justify="Justify.SpaceBetween">
                <MudProgressLinear Value="@context.ProgressPercentage" Color="Color.Tertiary" Striped="@(context.Status == EQueueItemStatus.Downloading)" Class="ma-0 pa-0 sv-progressbar" Style="width: 100%;" Size="Size.Large" />

                <MudText Typo="Typo.inherit" Color="Color.Warning" Class="ma-0 pa-0" Align="Align.Right" Inline="true" Style="font-size:10px;">
                  @context.ProgressPercentage%
                </MudText>
              </MudStack>

              <div style="display:flex; justify-content:space-between;">
                <span style="font-size:0.66rem;">average</span>
                <MudText Typo="Typo.body2" Align="Align.Left" Class="ma-0 pa-0" Style="white-space:nowrap">
                  @Helpers.FormatSpeed(context.AverageDownloadSpeed)
                </MudText>
              </div>

            </MudStack>
          </MudTd>
          <MudTd Style="text-align:end;" Class="sv-table-custom-row-1" DataLabel="Actions">
            <MudStack Row="true" Style="gap:5px;">
              <MudButton Variant="Variant.Filled" Color="@(context.Status == EQueueItemStatus.Downloading ? Color.Error : Color.Success)" Size="Size.Small" Style="min-width:75px;" OnClick="async() =>
                {
                  if (context.Status == EQueueItemStatus.Downloading) await CancelDownload(context); else await StartDownload(context);
                }">
              @(context.Status == EQueueItemStatus.Downloading ? "Stop" : "Start")
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" OnClick="async () => await DeleteQueueItem(context)">Delete</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Info" Size="Size.Small" OnClick="() => ToggleMoreOptions(context)">@(context.bShowMoreOptions ? "Collapse" : "Options")</MudButton>
          </MudStack>
        </MudTd>
      </RowTemplate>
      <ChildRowContent>
        @if (context.bShowMoreOptions)
          {
            <MudTr Style="justify-content: start;">
              <MudTd ColSpan="5" Style="justify-content: start; width:100%;">
                <MudPaper Class="pa-5" Elevation="0" Outlined="true" Style="justify-content: start; width:100%;">
                  <MudStack>
                    <MudCheckBox @bind-Value="@context.bShouldGetFilenameFromHttpHeaders" Label="Use Headers For Filename" Color="Color.Primary" />

                    <!-- Speed Graph Card -->
                    <MudPaper Class="pa-4 mt-4" Elevation="1" Style="width: 100%;">
                      <MudStack>
                        <MudText Typo="Typo.h6" Class="mb-3">Download Speed History</MudText>

                        @if (context.SpeedHistory.Any())
                        {
                          <div style="position: relative; height: 300px; width: 100%;">
                            <!-- Chart Container -->
                            <MudChart ChartType="ChartType.Line"
                                      ChartSeries="@_speedSeries"
                                      ChartOptions="@_chartOptions"
                                      Width="100%"
                                      Height="300px" />

                            <!-- Current Speed Label -->
                            <MudText Style="position: absolute; right: 0; top: 50%; transform: translateY(-50%);"
                                     Typo="Typo.body1" Color="Color.Info">
                              @Math.Round(context.CurrentDownloadSpeed / 1024 / 1024, 1) MB/s
                            </MudText>
                          </div>
                        }
                        else
                        {
                          <MudText Color="Color.Secondary" Class="my-4" Style="width: 100%; text-align: center;">
                            Speed graph will appear when download starts
                          </MudText>
                        }

                        <MudStack Row Justify="Justify.SpaceBetween" Class="mt-2">
                          <MudChip T="string"
                                   Color="Color.Info"
                                   Variant="Variant.Outlined"
                                   Icon="@Icons.Material.Filled.Speed">
                            Current: @Helpers.FormatSpeed(context.CurrentDownloadSpeed)
                          </MudChip>
                          <MudChip T="string"
                                   Color="Color.Tertiary"
                                   Variant="Variant.Outlined"
                                   Icon="@Icons.Material.Filled.AvTimer">
                            Average: @Helpers.FormatSpeed(context.AverageDownloadSpeed)
                          </MudChip>
                        </MudStack>
                      </MudStack>
                    </MudPaper>
                  </MudStack>
                </MudPaper>
              </MudTd>
            </MudTr>
          }
        </ChildRowContent>
      </MudTable>
    </MudPaper>
  }

  <FileManager @ref="fileManager" />
</LoadingIndicator>

@code {
  [Inject] public required AppDbContext _context { get; set; }
  [Inject] private PersistentComponentState _persistentState { get; set; } = default!;
  [Inject] public required DownloadStateService DownloadState { get; set; }
  [Inject] public IDownloadQueueService DownloadQueueService { get; set; } = default!;
  [Inject] private NavigationManager NavigationManager { get; set; } = default!;
  [Inject] private IDialogService DialogService { get; set; } = default!;

  private bool _isFullyLoaded;
  private PersistingComponentStateSubscription persistingSubscription;

  private HubConnection? hubConnection;

  private FileManager? fileManager;

  private string UrlText { get; set; } = "";
  private string ErrorMessage { get; set; } = "";

    private string? CustomFileName { get; set; }
  private string? DownloadFolderName { get; set; }

  private List<FileDownloadQueueItem> _fileDownloadQueueItems = new();
  private bool _isLoadingTheList = false;

  private HashSet<FileDownloadQueueItem> SelectedItems = new HashSet<FileDownloadQueueItem>();

  private bool _autoStartPausedDownloads = true;
  private bool _useMaxDownloadSpeedLimit = false;
  private int _maxAutoStartConcurrency = 3;
  private int _maxBytesPerSecond = -1;

  private readonly ChartOptions _chartOptions = new()
  {
    LineStrokeWidth = 3,
    YAxisLines = true,
    XAxisLines = false,    // Hide X axis lines
    InterpolationOption = InterpolationOption.Straight,
    ChartPalette = new[] { Colors.DeepPurple.Accent3 },
    YAxisTicks = 5
  };

  private List<ChartSeries> _speedSeries = new();

  protected override async Task OnInitializedAsync()
  {
    persistingSubscription = _persistentState.RegisterOnPersisting(PersistItems);

    // Loading downloads list
    if (_persistentState.TryTakeFromJson<List<FileDownloadQueueItem>>(nameof(_fileDownloadQueueItems), out var savedItems) && savedItems != null)
    {
      _fileDownloadQueueItems = savedItems;
    }
    else
    {
      await LoadDownloadItemsList();
    }

    await InitializeHubConnection();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (!firstRender) return;
    if (_isFullyLoaded) return;

    _isFullyLoaded = true;
    await InvokeAsync(StateHasChanged);
  }

  public async ValueTask DisposeAsync()
  {
    persistingSubscription.Dispose();

    if (hubConnection is not null)
    {
      await hubConnection.DisposeAsync();
    }
  }

  private Task PersistItems()
  {
    _persistentState.PersistAsJson(nameof(_fileDownloadQueueItems), _fileDownloadQueueItems);
    return Task.CompletedTask;
  }

  private async Task InitializeHubConnection()
  {
    // Get Basic Auth credentials from environment variables or configuration
    var basicAuthUsername = Environment.GetEnvironmentVariable("BASIC_AUTH_USERNAME");
    var basicAuthPassword = Environment.GetEnvironmentVariable("BASIC_AUTH_PASSWORD");

    // Determine the correct hub URL based on the environment
    var hubUrl = Environment.GetEnvironmentVariable("SIGNALR_HUB_URL")
                 ?? NavigationManager.BaseUri.TrimEnd('/') + "/DownloadProgressHub";

    if (!string.IsNullOrWhiteSpace(basicAuthUsername) && !string.IsNullOrWhiteSpace(basicAuthPassword))
    {
      string credentials = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes($"{basicAuthUsername}:{basicAuthPassword}"));

      hubConnection = new HubConnectionBuilder()
        .WithUrl(hubUrl, options => options.Headers.Add("Authorization", $"Basic {credentials}"))
        .WithAutomaticReconnect()
        .Build();
    }
    else
    {
      hubConnection = new HubConnectionBuilder()
        .WithUrl(hubUrl)
        .WithAutomaticReconnect()
        .Build();
    }

    hubConnection.On<DownloadProgress>("DownloadProgressUpdate", OnDownloadProgressUpdateAsync);
    hubConnection.On<int, string>("DownloadStateChanged", OnDownloadStateUpdateAsync);

    try
    {
      await hubConnection.StartAsync();

      // Subscribe to updates for all current downloads
      // if (_fileDownloadQueueItems != null)
      // {
      //   foreach (var item in _fileDownloadQueueItems.Where(x => x.Status == EQueueItemStatus.Downloading))
      //   {
      //     await hubConnection.SendAsync("SubscribeToDownload", item.Id);
      //   }
      // }
    }
    catch (Exception ex)
    {
      ErrorMessage = $"Failed to connect to progress updates: {ex.Message}";
    }
  }

  private async Task OnDownloadProgressUpdateAsync(DownloadProgress update)
  {
    var item = _fileDownloadQueueItems.FirstOrDefault(x => x.Id == update.ItemId);
    if (item != null)
    {
      item.ProgressPercentage = update.ProgressPercentage;
      item.CurrentDownloadSpeed = update.CurrentSpeed;
      item.AverageDownloadSpeed = update.AverageSpeed;

      // Add speed to history (keep last 60 entries)
      item.SpeedHistory.Add(update.CurrentSpeed);
      if (item.SpeedHistory.Count > 60)
      {
        item.SpeedHistory.RemoveAt(0);
      }

      UpdateSpeedChart(item);

      await RefreshFileManager();
      await InvokeAsync(StateHasChanged);
    }
    else
    {
      await LoadDownloadItemsList();
      await InvokeAsync(StateHasChanged);
    }
  }

  private async Task OnDownloadStateUpdateAsync(int itemId, string newStatus)
  {
    var item = _fileDownloadQueueItems.FirstOrDefault(x => x.Id == itemId);
    if (item != null)
    {
      await InvokeAsync(() =>
      {
        item.Status = Enum.Parse<EQueueItemStatus>(newStatus);
        if (newStatus != EQueueItemStatus.Downloading.ToString())
        {
          InvokeAsync(RefreshFileManager);
        }
        StateHasChanged();
      });
    }
    else
    {
      await LoadDownloadItemsList();
      await InvokeAsync(StateHasChanged);
    }
  }

  private async Task LoadDownloadItemsList()
  {
    try
    {
      _isLoadingTheList = true;
      var items = await DownloadQueueService.GetQueueItemsAsync();

      // Update the list while preserving existing items to prevent UI flicker
      foreach (var newItem in items)
      {
        var existingItem = _fileDownloadQueueItems.FirstOrDefault(x => x.Id == newItem.Id);
        if (existingItem != null)
        {
          existingItem.Status = newItem.Status;
          existingItem.ProgressPercentage = newItem.ProgressPercentage;
          existingItem.CurrentDownloadSpeed = newItem.CurrentDownloadSpeed;
          existingItem.AverageDownloadSpeed = newItem.AverageDownloadSpeed;
        }
        else
        {
          _fileDownloadQueueItems.Add(newItem);
        }
      }

      // Remove items that no longer exist
      _fileDownloadQueueItems.RemoveAll(x => !items.Any(y => y.Id == x.Id));
    }
    catch (Exception exception)
    {
      ErrorMessage = $"An Error Occurred While Getting Items List: {exception.Message}";
    }
    finally
    {
      _isLoadingTheList = false;
      await StartPausedDownloads();
    }
  }

  public void ShowInfo()
  {
    if (!string.IsNullOrWhiteSpace(UrlText))
    {
      var output = DownloadQueueService.GetFileInfo(UrlText);
      var parameters = new DialogParameters
            {
                { "Url", UrlText },
                { "isYoutubeUrl", false }
            };
      var options = new DialogOptions
      {
        MaxWidth = MaxWidth.Large,
        FullWidth = true,
        CloseButton = true
      };

      DialogService.Show<FileInfoDialog>("File Info", parameters, options);
    }
    else
    {
      ErrorMessage = "Please Enter A Valid URL";
    }
  }

  public async Task AddURL()
  {
    if (!string.IsNullOrWhiteSpace(UrlText))
    {
      try
      {
        int mbs = _maxBytesPerSecond;
        if (!_useMaxDownloadSpeedLimit) mbs = -1;

        var newFileDownload = new FileDownloadQueueItem() { InputUrl = UrlText, CustomFileName = CustomFileName, MaxBytesPerSecond = mbs, DownloadFolder = DownloadFolderName };
        _context.FileDownloadQueueItems.Add(newFileDownload);
        await _context.SaveChangesAsync();

        UrlText = "";
        StateHasChanged();

        await LoadDownloadItemsList();
      }
      catch (Exception exception)
      {
        ErrorMessage = $"An Error Occurred While Adding The URL: {exception.Message}";
      }
    }
    else
    {
      ErrorMessage = "Please Enter A Valid URL";
    }
  }

  private void ClearErrorMessage()
  {
    ErrorMessage = "";
  }

  private async Task StartDownload(FileDownloadQueueItem item)
  {
    try
    {
      await DownloadQueueService.StartDownloadAsync(item.Id, CustomFileName, DownloadFolderName);
    }
    catch (Exception exception)
    {
      ErrorMessage = $"An Error Occurred While Trying To Download: {exception.Message}";
    }
  }

  private async Task CancelDownload(FileDownloadQueueItem item)
  {
    try
    {
      await DownloadQueueService.CancelDownloadAsync(item.Id);
    }
    catch (Exception exception)
    {
      ErrorMessage = $"An Error Occurred While Canceling The Download: {exception.Message}";
    }
  }

  private async Task DeleteQueueItem(FileDownloadQueueItem item)
  {
    try
    {
      var itemToDelete = await _context.FileDownloadQueueItems.FindAsync(item.Id);
      if (itemToDelete != null)
      {
        _context.FileDownloadQueueItems.Remove(itemToDelete);
        DownloadState.RemoveTokenSource(item.Id);
        await _context.SaveChangesAsync();
        await LoadDownloadItemsList();
      }
    }
    catch (Exception exception)
    {
      ErrorMessage = $"An Error Occurred While Deleting The Item: {exception.Message}";
    }
  }

  private async Task DeleteSelectedFileDownloadQueueItems()
  {
    try
    {
      foreach (var item in SelectedItems)
      {
        var itemToDelete = await _context.FileDownloadQueueItems.FindAsync(item.Id);
        if (itemToDelete != null)
        {
          _context.FileDownloadQueueItems.Remove(itemToDelete);
          DownloadState.RemoveTokenSource(item.Id);
        }
      }
      await _context.SaveChangesAsync();
      await LoadDownloadItemsList();
    }
    catch (Exception exception)
    {
      ErrorMessage = $"An Error Occurred While Deleting Selected Items: {exception.Message}";
    }
  }

  private void ToggleMoreOptions(FileDownloadQueueItem item)
  {
    item.bShowMoreOptions = !item.bShowMoreOptions;
  }

  private async Task HandleUrlInputKeyDown(KeyboardEventArgs e)
  {
    if (e.Key == "Enter")
    {
      await AddURL();
    }
  }

  private async Task RefreshFileManager()
  {
    try
    {
      if (fileManager is not null)
      {
        await InvokeAsync(fileManager.RefreshFiles);
      }
    }
    catch (Exception exception)
    {
      ErrorMessage = $"An Error Occurred While Refreshing Files: {exception.Message}";
    }
  }

  private async Task StartPausedDownloads()
  {
    if (!_autoStartPausedDownloads)
    {
      return; // Autostart is disabled
    }

    // Calculate how many items are already downloading
    int currentActiveDownloads = _fileDownloadQueueItems
        .Count(item => item.Status == EQueueItemStatus.Downloading);

    // If we're already at or above the concurrency limit, exit the function
    if (currentActiveDownloads >= _maxAutoStartConcurrency)
    {
      return;
    }

    // Find all paused items waiting to be started
    var pausedItems = _fileDownloadQueueItems
        .Where(item => item.Status == EQueueItemStatus.Paused)
        .ToList();

    if (!pausedItems.Any())
    {
      return; // No paused items to start
    }

    int startedCount = 0;
    foreach (var item in pausedItems)
    {
      // Break if the total would exceed the concurrency limit
      if (currentActiveDownloads + startedCount >= _maxAutoStartConcurrency)
      {
        break;
      }

      try
      {
        await StartDownload(item);
        startedCount++;
      }
      catch (Exception ex)
      {
        ErrorMessage = $"Error autostarting download '{item.InputUrl}': {ex.Message}";
        Console.WriteLine($"Error autostarting download '{item.InputUrl}': {ex.Message}");
      }
    }
  }

  private void UpdateSpeedChart(FileDownloadQueueItem item)
  {
    _speedSeries = new List<ChartSeries>
      {
        new ChartSeries
        {
          Name = "Download Speed",
          Data = item.SpeedHistory.Select(s => Math.Round(s / 1024 / 1024, 2)).ToArray()
        }
      };
  }
}
