@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SaveHere.Models
@using SaveHere.Services

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IUserManagementService UserManagementService
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Register</PageTitle>

@if (!_isRegistrationEnabled)
{
  <MudAlert Severity="Severity.Warning">Registration is currently disabled. Please contact an administrator.</MudAlert>
}
else
{
  <MudText Typo="Typo.h3" GutterBottom="true">Register</MudText>

  <MudGrid>
    <MudItem md="6">
      <StatusMessage Message="@Message" />
      <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
        <DataAnnotationsValidator />

        <MudText Typo="Typo.body1" GutterBottom="true">Create a new account.</MudText>

        <MudGrid>
          <MudItem md="12">
            <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                Label="Email" Placeholder="name@example.com"
                                UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } })" />
          </MudItem>
          <MudItem md="12">
            <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                Label="Password" InputType="InputType.Password" Placeholder="password"
                                UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })" />
          </MudItem>
          <MudItem md="12">
            <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                Label="Confirm Password" InputType="InputType.Password" Placeholder="confirm password"
                                UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })" />
          </MudItem>
          <MudItem md="12">
            <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Register</MudStaticButton>
          </MudItem>
        </MudGrid>
      </EditForm>
    </MudItem>
    <MudItem md="6">
      <MudText Typo="Typo.body1" GutterBottom="true">Use another service to register.</MudText>
      <ExternalLoginPicker />
    </MudItem>
  </MudGrid>
}

@code {
  private IEnumerable<IdentityError>? identityErrors;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

  private bool _isRegistrationEnabled;

  protected override async Task OnInitializedAsync()
  {
    await CheckRegistrationStatus();
  }

  private async Task CheckRegistrationStatus()
  {
    _isRegistrationEnabled = await UserManagementService.IsRegistrationEnabledAsync();
    await InvokeAsync(StateHasChanged);
  }

  public async Task RegisterUser(EditContext editContext)
  {
    if (!_isRegistrationEnabled)
    {
      identityErrors = new[] { new IdentityError { Description = "Registration is currently disabled." } };
      return;
    }

    var user = CreateUser();
    user.IsEnabled = false; // New users start as disabled

    await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
    var emailStore = GetEmailStore();
    await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
    var result = await UserManager.CreateAsync(user, Input.Password);

    if (!result.Succeeded)
    {
      identityErrors = result.Errors;
      return;
    }

    // Add user to the User role
    await UserManager.AddToRoleAsync(user, "User");

    Logger.LogInformation("User account created and added to User role. Awaiting admin approval.");

    // Don't sign in the user - they need admin approval first
    RedirectManager.RedirectTo(
        "Account/RegisterConfirmation",
        new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
  }

  private ApplicationUser CreateUser()
  {
    try
    {
      return Activator.CreateInstance<ApplicationUser>();
    }
    catch
    {
      throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
          $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
    }
  }

  private IUserEmailStore<ApplicationUser> GetEmailStore()
  {
    if (!UserManager.SupportsUserEmail)
    {
      throw new NotSupportedException("The default UI requires a user store with email support.");
    }
    return (IUserEmailStore<ApplicationUser>)UserStore;
  }

  private sealed class InputModel
  {
    [Required]
    [EmailAddress]
    [Display(Name = "Email")]
    public string Email { get; set; } = "";

    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
    [DataType(DataType.Password)]
    [Display(Name = "Password")]
    public string Password { get; set; } = "";

    [DataType(DataType.Password)]
    [Display(Name = "Confirm password")]
    [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
    public string ConfirmPassword { get; set; } = "";
  }
}
