@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SaveHere.Models
@using SaveHere.Services

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject DefaultCredentialsService DefaultCredentialsService

<PageTitle>Log in</PageTitle>

@if (_defaultCredentials != null)
{
  <MudAlert Severity="Severity.Warning" Class="ma-4">
    <MudText Typo="Typo.h6">Default Admin Credentials</MudText>
    <MudText>The application is using default admin credentials. Please log in and change your password immediately.</MudText>
    <MudDivider Class="my-2" />
    <br/>
    <MudText>Username:</MudText>
    <MudText><strong>@_defaultCredentials.Value.username</strong></MudText>
    <br/>
    <MudText>Password:</MudText>
    <MudText><strong>@_defaultCredentials.Value.password</strong></MudText>
  </MudAlert>
}

<div style="padding: 1rem;">
  <MudText Typo="Typo.h3" GutterBottom="true">Log in</MudText>

  <MudGrid>
    <MudItem md="6">
      <StatusMessage Message="@errorMessage" />
      <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />

        <MudText GutterBottom="true" Typo="Typo.subtitle1" Color="Color.Warning">Please log in using the provided admin account credentials.</MudText>

        <MudGrid>
          <MudItem md="12">
            <MudStaticTextField For="@(() => Input.Username)" @bind-Value="Input.Username"
                                Label="Username" Placeholder="username"
                                UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } })" />
          </MudItem>
          <MudItem md="12">
            <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                Label="Password" InputType="InputType.Password" Placeholder="password"
                                UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })" />
          </MudItem>
          <MudItem md="12">
            <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
          </MudItem>
          <MudItem md="12">
            <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
          </MudItem>
        </MudGrid>
      </EditForm>

      @* <MudGrid Class="mt-4">
            <MudItem md="12">
                <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink><br />
                <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink><br />
                <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
            </MudItem>
        </MudGrid> *@
    </MudItem>
    @* <MudItem md="6">
        <MudText GutterBottom="true" Typo="Typo.body1">Use another service to log in.</MudText>

        <ExternalLoginPicker />
    </MudItem> *@
  </MudGrid>
</div>

@code {
  private string? errorMessage;
  private (string username, string password)? _defaultCredentials;

  [CascadingParameter]
  private HttpContext HttpContext { get; set; } = default!;

  [SupplyParameterFromForm]
  private InputModel Input { get; set; } = new();

  [SupplyParameterFromQuery]
  private string? ReturnUrl { get; set; }

  protected override async Task OnInitializedAsync()
  {
    if (HttpMethods.IsGet(HttpContext.Request.Method))
    {
      // Clear the existing external cookie to ensure a clean login process
      await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
    }

    await CheckDefaultCredentials();
  }

  public async Task LoginUser()
  {
    // This doesn't count login failures towards account lockout
    // To enable password failures to trigger account lockout, set lockoutOnFailure: true
    var result = await SignInManager.PasswordSignInAsync(Input.Username, Input.Password, Input.RememberMe, lockoutOnFailure: false);
    if (result.Succeeded)
    {
      Logger.LogInformation("User logged in.");

      // If using default credentials, redirect to password change
      if (_defaultCredentials?.username == Input.Username &&
          _defaultCredentials?.password == Input.Password)
      {
        RedirectManager.RedirectTo("Account/Manage/ChangePassword");
      }
      else
      {
        RedirectManager.RedirectTo(ReturnUrl);
      }
    }
    else if (result.RequiresTwoFactor)
    {
      RedirectManager.RedirectTo(
          "Account/LoginWith2fa",
          new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
    }
    else if (result.IsLockedOut)
    {
      Logger.LogWarning("User account locked out.");
      RedirectManager.RedirectTo("Account/Lockout");
    }
    else
    {
      errorMessage = "Error: Invalid login attempt.";
    }
  }

  private async Task CheckDefaultCredentials()
  {
    _defaultCredentials = await DefaultCredentialsService.GetDefaultCredentials();
  }

  private sealed class InputModel
  {
    [Required]
    public string Username { get; set; } = "";

    [Required]
    [DataType(DataType.Password)]
    public string Password { get; set; } = "";

    [Display(Name = "Remember me?")]
    public bool RememberMe { get; set; }
  }
}
