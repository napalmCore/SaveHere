@page "/Account/Manage/UserManagement"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using SaveHere.Models
@using SaveHere.Services
@attribute [Authorize(Roles = "Admin")]
@inject IDialogService DialogService
@rendermode InteractiveServer
@attribute [StreamRendering]

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@inject UserManager<ApplicationUser> UserManager
@inject IUserManagementService UserManagementService
@inject ILogger<UserManagement> Logger

<PageTitle>User Management</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">User Management</MudText>

<MudPaper Class="pa-4 mb-4">
  <MudSwitch @bind-Checked="@_isRegistrationEnabled" T="bool" Color="Color.Primary"
             Label="Allow New User Registration"
             OnClick="@(async () => await ToggleRegistrationAsync())" />
</MudPaper>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
  <MudTabPanel Text="Pending Users">
    <MudTable Items="@_pendingUsers" Dense Hover Striped>
      <HeaderContent>
        <MudTh>Email</MudTh>
        <MudTh>Actions</MudTh>
      </HeaderContent>
      <RowTemplate>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd>
          <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(async () => await EnableUserAsync(context))">
            Enable
          </MudButton>
        </MudTd>
      </RowTemplate>
    </MudTable>
  </MudTabPanel>

  <MudTabPanel Text="All Users">
    <MudTable T="ApplicationUser" Items="@_allUsers" Dense="true" Hover="true" Striped="true" Filter="new Func<ApplicationUser, bool>(FilterUsers)">
      <ToolBarContent>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
      </ToolBarContent>
      <HeaderContent>
        <MudTh>Email</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Roles</MudTh>
        <MudTh>Actions</MudTh>
      </HeaderContent>
      <RowTemplate>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Status">
          <MudChip T="string" Color="@(context.IsEnabled? Color.Success: Color.Error)" Size="Size.Small">
            @(context.IsEnabled ? "Enabled" : "Disabled")
          </MudChip>
        </MudTd>
        <MudTd DataLabel="Roles">
          @{
            var roles = UserManager.GetRolesAsync(context).Result;
            foreach (var role in roles)
            {
              <MudChip T="string" Color="@(role == "Admin" ? Color.Primary : Color.Default)" Size="Size.Small" Class="mr-1">
                @role
              </MudChip>
            }
          }
        </MudTd>
        <MudTd>
          @{
            var isLastAdmin = IsLastAdminAsync(context).Result;
            if (!isLastAdmin)
            {
              <MudButton Variant="Variant.Filled"
                         Color="@(context.IsEnabled? Color.Error: Color.Success)"
                         OnClick="@(async () => await ToggleUserStatusAsync(context))">
                @(context.IsEnabled ? "Disable" : "Enable")
              </MudButton>
            }
          }
        </MudTd>
      </RowTemplate>
    </MudTable>
  </MudTabPanel>
</MudTabs>

@code {
  private bool _isRegistrationEnabled;
  private string _searchString = "";
  private List<ApplicationUser> _pendingUsers = new();
  private List<ApplicationUser> _allUsers = new();

  protected override async Task OnInitializedAsync()
  {
    _isRegistrationEnabled = await UserManagementService.IsRegistrationEnabledAsync();
    await RefreshUsersAsync();
  }

  private async Task RefreshUsersAsync()
  {
    _pendingUsers = (await UserManagementService.GetPendingUsersAsync()).ToList();
    _allUsers = (await UserManagementService.GetAllUsersAsync()).ToList();
  }

  private async Task ToggleRegistrationAsync()
  {
    await UserManagementService.SetRegistrationEnabledAsync(_isRegistrationEnabled);
    Logger.LogInformation("Registration {Status}", _isRegistrationEnabled ? "enabled" : "disabled");
  }

  private async Task EnableUserAsync(ApplicationUser user)
  {
    if (await UserManagementService.EnableUserAsync(user.Id))
    {
      Logger.LogInformation("Enabled user: {Email}", user.Email);
      await RefreshUsersAsync();
    }
  }

  private async Task ToggleUserStatusAsync(ApplicationUser user)
  {
    var success = user.IsEnabled
        ? await UserManagementService.DisableUserAsync(user.Id)
        : await UserManagementService.EnableUserAsync(user.Id);

    if (success)
    {
      Logger.LogInformation("User {Email} {Status}", user.Email, user.IsEnabled ? "disabled" : "enabled");
      await RefreshUsersAsync();
    }
  }

  private async Task<bool> IsLastAdminAsync(ApplicationUser user)
  {
    var isAdmin = await UserManager.IsInRoleAsync(user, "Admin");
    if (!isAdmin) return false;

    var adminUsers = await UserManager.GetUsersInRoleAsync("Admin");
    return adminUsers.Count <= 1;
  }

  private bool FilterUsers(ApplicationUser user)
  {
    if (string.IsNullOrWhiteSpace(_searchString)) return true;

    return user.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false;
  }
}
