@using System.Text.RegularExpressions
@using System.Dynamic
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using SaveHere.Models
@using SaveHere.Models.db
@using SaveHere.Services

<LoadingIndicator IsLoaded="_isFullyLoaded">
  <MudPaper Elevation="5" Class="px-5 pa-4 mx-5 mt-5 sv-paper">
    <MudStack Row>
      <MudTextField @bind-Value="InputUrl" Label="RJ Media URL" Variant="Variant.Outlined" Margin="Margin.Dense"
                    HelperText="Enter RJ Media URL To Check For The Full Media Link" HelperTextOnFocus="true" Adornment="Adornment.End"
                    AdornmentIcon="@Icons.Material.Filled.LibraryMusic" AdornmentColor="Color.Info" Clearable
                    Immediate @onkeydown="HandleUrlInputKeyDown" TextUpdateSuppression="false" />
      <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.QueueMusic" Color="Color.Primary"
                 Style="text-transform:none; height:40px; margin-top:0.5rem;" Class="pr-5" Size="Size.Small" OnClick="CheckLink">Check</MudButton>
    </MudStack>

    <MudCheckBox T="bool" @bind-Value="AutoSendToQueue" Color="Color.Primary" TriState="false">Automatically send to download queue</MudCheckBox>
    <MudCheckBox T="bool" @bind-Value="AutoClearInput" Color="Color.Primary" TriState="false">Automatically clear input after extraction</MudCheckBox>

    <MudButton OnClick="@(async () => await TransferToDownload(FullUrl))"
               Disabled="@string.IsNullOrEmpty(FullUrl)"
               Color="Color.Primary"
               Variant="Variant.Filled"
               Class="ma-3"
               style="display: block;">
      Send to Download Queue
    </MudButton>

    <MudLink Href="@FullUrl" Color="Color.Tertiary" Class="mx-3" Style="word-break: break-all; overflow-wrap: break-word; box-sizing: border-box; white-space: normal;">@FullUrl</MudLink>

  </MudPaper>

  <!-- Second Paper for bulk extraction and manual conversion -->
  <MudPaper Elevation="5" Class="px-5 pa-4 mx-5 mt-5 sv-paper">
    <MudStack Row>
      <MudTextField @bind-Value="PageUrl" Label="RJ Media Page URL" Variant="Variant.Outlined" Margin="Margin.Dense"
                    HelperText="Enter RJ Media Page URL to extract all short links" HelperTextOnFocus="true" Adornment="Adornment.End"
                    AdornmentIcon="@Icons.Material.Filled.Link" AdornmentColor="Color.Info" Clearable Immediate @onkeydown="HandlePageUrlInputKeyDown" TextUpdateSuppression="false" />

      <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" Color="Color.Primary"
                 Style="text-transform:none; height:40px; margin-top:0.5rem;" Class="pr-5" Size="Size.Small" OnClick="ExtractLinksFromPage">
        Extract Links
      </MudButton>
    </MudStack>

    <!-- Global Buttons for converting or sending all links -->
    <MudStack Row Spacing="2" Class="my-2">

      @if (!_isConvertingLinks)
      {
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ConvertAllLinks">
          Convert All Links
        </MudButton>
      }
      else
      {
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="StopConvertAllLinks">
          Stop Conversion
        </MudButton>
      }

      <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SendAllToQueue"
                 Disabled="@(!ExtractedLinks.Any(x => !string.IsNullOrEmpty(x.FullUrl)))">
        Send All Converted Links to Queue
      </MudButton>
    </MudStack>

    <MudPaper Class="pa-3" Elevation="0">
      @if (ExtractedLinks != null && ExtractedLinks.Any())
      {
        <MudList T="RjLinkItem">
          @foreach (var linkItem in ExtractedLinks)
          {
            <MudListItem>
              <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                <MudText>@linkItem.ShortUrl</MudText>
                @if (string.IsNullOrEmpty(linkItem.FullUrl))
                {
                  <MudButton Size="Size.Small" OnClick="() => ConvertLink(linkItem)">Convert</MudButton>
                }
                else
                {
                  <MudLink Href="@linkItem.FullUrl" Target="_blank" Color="Color.Tertiary"
                           Style="word-break: break-all; overflow-wrap: break-word;">@linkItem.FullUrl</MudLink>
                  <MudButton Size="Size.Small" OnClick="() => TransferToDownload(linkItem.FullUrl!)">
                    Send to Queue
                  </MudButton>
                }
              </MudStack>
            </MudListItem>
          }
        </MudList>
      }
      else
      {
        <MudText Color="Color.Info">No links extracted or processed yet.</MudText>
      }
    </MudPaper>
  </MudPaper>

</LoadingIndicator>

<style type="text/css" media="screen and (max-width:599px)">
  .mud-xs-table .mud-table-cell::before {
    word-break: keep-all !important;
    min-width: 55px !important;
  }

  .sv-custom-progress-stack {
    width: 100% !important;
  }

  .sv-table {
    margin: 5px !important;
    padding: 5px !important;
  }

  .sv-paper {
    margin: 5px !important;
    padding: 5px !important;
  }

  .sv-main-stack {
    gap: 3px !important;
  }

  .mud-xs-table.mud-table-dense .mud-table-cell {
    padding: 6px;
  }

  .sv-table-custom-row-1 {
    justify-content: start !important;
  }

  .mud-table-dense * .mud-table-row .mud-table-cell:last-child {
    padding-right: 0;
    padding-inline-end: 0;
  }
</style>

<style>
  .my-custom-media-dialog {
    backdrop-filter: blur(10px);
  }
</style>

@code {
  private bool _isFullyLoaded;

  [Inject] public required AppDbContext _context { get; set; }
  [Inject] public required IProgressHubService _progressHubService { get; set; } = default!;

  private string InputUrl = "";
  private string FullUrl = "";

  private bool AutoSendToQueue = true;
  private bool AutoClearInput = true;

  private string PageUrl = "";
  private List<RjLinkItem> ExtractedLinks = new();
  private CancellationTokenSource? _conversionCancellationTokenSource;
  private bool _isConvertingLinks = false;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (!firstRender) return;
    if (_isFullyLoaded) return;

    _isFullyLoaded = true;
    await InvokeAsync(StateHasChanged);
  }

  public async Task<string?> ResolveFullRjLinkAsync(string rjShortUrl)
  {
    if (string.IsNullOrWhiteSpace(rjShortUrl))
    {
      throw new ArgumentException("The provided RJ short URL is null or empty.", nameof(rjShortUrl));
    }

    if (!DoesUrlMatchRJShortLinksFormat(rjShortUrl))
    {
      throw new ArgumentException("The provided URL does not match the expected RJ short link format.", nameof(rjShortUrl));
    }

    try
    {
      var handler = new HttpClientHandler { AllowAutoRedirect = true };

      // Using HttpClient with a `using` statement to ensure proper disposal
      using (var httpClient = new HttpClient(handler))
      {
        httpClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("*/*"));
        httpClient.DefaultRequestHeaders.UserAgent.ParseAdd("curl/8.4.0");

        var response = await httpClient.GetAsync(rjShortUrl);
        response.EnsureSuccessStatusCode();

        var responseBody = await response.Content.ReadAsStringAsync();

        // Extract the relevant JSON data from the response
        string startMarker = @"<script id=""__NEXT_DATA__"" type=""application/json"">";
        string endMarker = "</script>";
        int startMarkerIndex = responseBody.IndexOf(startMarker, StringComparison.Ordinal) + startMarker.Length;
        int endMarkerIndex = responseBody.IndexOf(endMarker, startMarkerIndex, StringComparison.Ordinal);

        if (startMarkerIndex < 0 || endMarkerIndex < 0 || startMarkerIndex >= endMarkerIndex)
        {
          throw new InvalidOperationException("Unable to locate the JSON data in the response.");
        }

        string jsonData = responseBody.Substring(startMarkerIndex, endMarkerIndex - startMarkerIndex);

        // Deserialize the data
        dynamic? obj = JsonConvert.DeserializeObject<ExpandoObject>(jsonData);

        if (obj != null)
        {
          string checkString = rjShortUrl.Substring(15, 2).ToLower();

          if (checkString == "p/" || checkString == "m/" || checkString == "v/") // For Music, Video, Podcast
          {
            return obj.props.pageProps.media.link;
          }
          else if (checkString == "pm") // For Playlist
          {
            var firstItem = obj.props.pageProps.playlist.items?.FirstOrDefault();
            if (firstItem != null)
            {
              return firstItem.link;
            }
          }
          else if (checkString == "st") // For Story
          {
            return obj.props.pageProps.story.link;
          }
        }
      }
    }
    catch (HttpRequestException httpEx)
    {
      // Log or handle the exception (e.g., network failure, invalid response, etc.)
      Console.WriteLine($"HTTP request failed: {httpEx.Message}");
    }
    catch (Exception ex)
    {
      // Log or handle generic exceptions
      Console.WriteLine($"An error occurred: {ex.Message}");
    }

    // Return null if the link could not be resolved
    return null;
  }

  private static bool DoesUrlMatchRJShortLinksFormat(string input)
  {
    const string pattern = @"^https:\/\/rj\.app\/[a-z]{1,10}\/[a-zA-Z0-9]{4,12}$";
    var regex = new Regex(pattern);
    return regex.IsMatch(input);
  }

  public async Task TestRjLinkResolution()
  {
    string shortLink = "https://rj.app/m/dv23LwEK"; // Example short link
    string? fullLink = await ResolveFullRjLinkAsync(shortLink);

    if (fullLink != null)
    {
      Console.WriteLine($"Resolved Link: {fullLink}");
    }
    else
    {
      Console.WriteLine("Failed to resolve the RJ short link.");
    }
  }

  public async Task CheckLink()
  {
    try
    {
      FullUrl = "";
      string? fullLink = await ResolveFullRjLinkAsync(InputUrl);

      if (fullLink != null)
      {
        FullUrl = fullLink;

        if (AutoSendToQueue)
        {
          await TransferToDownload(FullUrl);
        }

        if (AutoClearInput)
        {
          InputUrl = "";
        }
      }
      else
      {
        FullUrl = "";
      }
    }
    catch {/*pass for now*/}
    finally
    {
      await InvokeAsync(StateHasChanged);
    }
  }

  // The individual link conversion method:
  private async Task ConvertLink(RjLinkItem linkItem)
  {
    // Only convert if it hasn’t been converted yet
    if (string.IsNullOrEmpty(linkItem.FullUrl))
    {
      linkItem.FullUrl = await ResolveFullRjLinkAsync(linkItem.ShortUrl);
      await InvokeAsync(StateHasChanged);
    }
  }

  // Convert all extracted links (only those that have not been converted)
  private async Task ConvertAllLinks()
  {
    _isConvertingLinks = true;
    _conversionCancellationTokenSource = new CancellationTokenSource();
    var token = _conversionCancellationTokenSource.Token;

    try
    {
      foreach (var linkItem in ExtractedLinks.Where(x => string.IsNullOrEmpty(x.FullUrl)))
      {
        token.ThrowIfCancellationRequested();

        linkItem.FullUrl = await ResolveFullRjLinkAsync(linkItem.ShortUrl);

        await Task.Delay(100, token); // To avoid hitting rate limits

        await InvokeAsync(StateHasChanged);
      }
    }
    catch (OperationCanceledException)
    {
      // pass for now
    }
    finally
    {
      _isConvertingLinks = false;
      _conversionCancellationTokenSource?.Dispose();
      _conversionCancellationTokenSource = null;
      await InvokeAsync(StateHasChanged);
    }
  }

  private void StopConvertAllLinks()
  {
    _conversionCancellationTokenSource?.Cancel();
  }


  // Send all converted links to the download queue
  private async Task SendAllToQueue()
  {
    foreach (var linkItem in ExtractedLinks.Where(x => !string.IsNullOrEmpty(x.FullUrl)))
    {
      await TransferToDownload(linkItem.FullUrl!);
    }
  }

  private async Task TransferToDownload(string url)
  {
    if (!string.IsNullOrEmpty(url))
    {
      // Check if a record with the same InputUrl already exists in the database
      bool exists = await _context.FileDownloadQueueItems.AnyAsync(x => x.InputUrl == url);

      if (!exists)
      {
        var newFileDownload = new FileDownloadQueueItem() { InputUrl = url };
        _context.FileDownloadQueueItems.Add(newFileDownload);
        await _context.SaveChangesAsync();

        await _progressHubService.BroadcastStateChange(newFileDownload.Id, newFileDownload.Status.ToString());

        await InvokeAsync(StateHasChanged);
      }
      else
      {
        // pass for now
      }
    }
  }

  private async Task HandleUrlInputKeyDown(KeyboardEventArgs e)
  {
    if (e.Key == "Enter")
    {
      await CheckLink();
    }
  }

  private async Task HandlePageUrlInputKeyDown(KeyboardEventArgs e)
  {
    if (e.Key == "Enter")
    {
      await ExtractLinksFromPage();
    }
  }

  private List<string> ExtractRJShortLinks(string htmlContent)
  {
    const string linkPattern = @"https:\/\/rj\.app\/[a-z]{1,10}\/[a-zA-Z0-9]{4,12}";
    var regex = new Regex(linkPattern);
    return regex.Matches(htmlContent).Select(match => match.Value).Distinct().ToList();
  }

  // Modified extraction method that simply extracts and displays short links
  private async Task ExtractLinksFromPage()
  {
    try
    {
      // Clear previous results
      ExtractedLinks.Clear();

      if (string.IsNullOrWhiteSpace(PageUrl))
      {
        throw new ArgumentException("Page URL is empty.");
      }

      var handler = new HttpClientHandler { AllowAutoRedirect = true };
      using (var httpClient = new HttpClient(handler))
      {
        httpClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("*/*"));
        httpClient.DefaultRequestHeaders.UserAgent.ParseAdd("curl/8.4.0");

        // Fetch the page content
        var pageContent = await httpClient.GetStringAsync(PageUrl);

        // Extract all RJ short links from the page content
        var shortUrls = ExtractRJShortLinks(pageContent);

        // Populate the list with unconverted links
        foreach (var shortUrl in shortUrls)
        {
          ExtractedLinks.Add(new RjLinkItem { ShortUrl = shortUrl });
        }
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine($"An error occurred during bulk extraction: {ex.Message}");
    }
    finally
    {
      await InvokeAsync(StateHasChanged);
    }
  }

  public class RjLinkItem
  {
    public string ShortUrl { get; set; } = string.Empty;
    public string? FullUrl { get; set; }
  }

}
