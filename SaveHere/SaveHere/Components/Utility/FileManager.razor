@using SaveHere.Components.Utility
@using SaveHere.Helpers
@using SaveHere.Models
@using SaveHere.Services
@using MudBlazor
@using System.Net
@inject IFileManagerService FileManagerService
@inject IDialogService DialogService
@inject ShortLinkService ShortLinkService
@inject NavigationManager NavigationManager

<MudPaper Class="pa-5 mx-5 mt-3 sv-paper" Elevation="5">
  @if (!string.IsNullOrEmpty(errorMessage))
  {
      <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
  }
  
  <div style="display:flex; justify-content:end; width:100%">
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="LoadFiles" Class="mb-4 mt-2" StartIcon="@Icons.Material.Filled.Refresh">
      Refresh
    </MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="DeleteSelected" Class="mb-4 mx-3 mt-2" StartIcon="@Icons.Material.Filled.DeleteForever">
      Delete Selected
    </MudButton>
  </div>

  <MudElement style="display:flex; justify-content: start; width: 100%; background: #55555533; border-radius: 6px; padding: 0; box-sizing: border-box;">
    <MudBreadcrumbs Items="@breadcrumbsItems" Class="">
      <SeparatorTemplate>
        <MudText Typo="Typo.subtitle2" Style="margin: 0; padding: 0; width: 0px; font-size: 0.75rem;">/</MudText>
      </SeparatorTemplate>
      <ItemTemplate Context="item">
        <MudButton Class="pa-2" Style="box-sizing: border-box; margin-right: -10px; margin-left: -5px; margin-top: -10px; margin-bottom: -10px; text-decoration: underline;" Variant="Variant.Text" OnClick="@(async () => await NavigateToDirectory(item.Href))" Color="Color.Primary">@item.Text</MudButton>
      </ItemTemplate>
    </MudBreadcrumbs>
  </MudElement>

  <MudTable Items="@files" Dense="@Dense" Hover MultiSelection Loading="@isLoading" Elevation="0" SortLabel="Sort By" @bind-SelectedItems="SelectedItems">
    <HeaderContent>
      <MudTh Style="width:100%;">
        <MudTableSortLabel SortBy="new Func<FileSystemItem, object>(x => x.Name)">
          Name
        </MudTableSortLabel>
      </MudTh>
      <MudTh>
        <MudTableSortLabel SortBy="new Func<FileSystemItem, object>(x => x is FileItem xfi ? xfi.Extension : x.Type)">
          Type
        </MudTableSortLabel>
      </MudTh>
      <MudTh>
        <MudTableSortLabel SortBy="new Func<FileSystemItem, object>(x => x is FileItem xfi ? xfi.Length : -1)">
          Size
        </MudTableSortLabel>
      </MudTh>
      <MudTh>
        <MudTableSortLabel SortBy="new Func<FileSystemItem, object>(x => x is FileItem xfi ? xfi.CreatedAt : DateTime.MinValue)">
          Created
        </MudTableSortLabel>
      </MudTh>
      <MudTh>
        <MudTableSortLabel SortBy="new Func<FileSystemItem, object>(x => x is FileItem xfi ? xfi.LastModified : DateTime.MinValue)">
          Modified
        </MudTableSortLabel>
      </MudTh>
      <MudTh Style="text-align:center;">Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd DataLabel="Name" Style="word-break:break-all;">
        @if (context is DirectoryItem directory)
        {
            <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="() => NavigateToDirectory(directory.FullName)" Style="padding: 0; margin: 0; min-width: unset; text-decoration: underline;" Color="Color.Primary">
              <MudIcon Icon="@Icons.Material.Outlined.Folder" Style="margin-right: 5px; margin-left: auto; vertical-align: middle;" />
              @directory.Name
            </MudButton>
        }
        else if (context is FileItem file)
        {
            <MudIcon Icon="@Icons.Material.Outlined.InsertDriveFile" Style="margin-right: 5px; margin-left: auto; vertical-align: middle;" />
            @file.Name
        }
        else
        {
            @context.Name
        }
      </MudTd>
      <MudTd DataLabel="Type">
        @(context is FileItem xfi ? xfi.Extension : context.Type)
      </MudTd>
      <MudTd DataLabel="Size" Style="white-space:nowrap">
        @(context is FileItem xfi ? Helpers.FormatSize(xfi.Length) : string.Empty)
      </MudTd>
      <MudTd DataLabel="Created">
        @if (context is FileItem file)
        {
            @file.CreatedAt.ToString("g")
        }
      </MudTd>
      <MudTd DataLabel="Modified">
        @if (context is FileItem file)
        {
            @file.LastModified.ToString("g")
        }
      </MudTd>
      <MudTd DataLabel="Actions" Style="text-align:end;">
        <MudStack Row="true" Style="gap:5px; justify-content:end">
          @if (context is FileItem file)
          {
              @if (IsMediaFile(context.Name))
              {
                  <MudButton OnClick="@(() => OpenMediaDialog(file))"
                           Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small">
                    Play
                  </MudButton>
              }
              <MudButton Variant="Variant.Filled" Color="Color.Info" Size="Size.Small"
                       OnClick="() => RenameItem(file)">
                Rename
              </MudButton>
              <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small"
                       Href="@($"/d/{GetShortLink(file)}")" Target="_blank">
                Download
              </MudButton>
              <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small"
                       OnClick="() => DeleteFile(file)">
                Delete
              </MudButton>
          }
          else if (context is DirectoryItem directory)
          {
              <MudButton Variant="Variant.Filled" Color="Color.Info" Size="Size.Small"
                       OnClick="() => RenameItem(directory)">
                Rename
              </MudButton>
              <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small"
                       OnClick="() => DeleteDirectory(directory)">
                Delete
              </MudButton>
          }
        </MudStack>
      </MudTd>
    </RowTemplate>
  </MudTable>
</MudPaper>

<style type="text/css" media="screen and (max-width:599px)">
  .mud-xs-table .mud-table-cell::before {
    word-break: keep-all !important;
    min-width: 55px !important;
  }

  .sv-custom-progress-stack {
    width: 100% !important;
  }

  .sv-table {
    margin: 5px !important;
    padding: 5px !important;
  }

  .sv-paper {
    margin: 5px !important;
    padding: 5px !important;
  }

  .sv-main-stack {
    gap: 3px !important;
  }

  .mud-xs-table.mud-table-dense .mud-table-cell {
    padding: 6px;
  }

  .sv-table-custom-row-1 {
    justify-content: start !important;
  }

  .mud-table-dense * .mud-table-row .mud-table-cell:last-child {
    padding-right: 0;
    padding-inline-end: 0;
  }

  .mud-table-cell .mud-checkbox {
    margin: 0 !important;
  }
</style>

<style>
  .my-custom-media-dialog {
    backdrop-filter: blur(10px);
  }
</style>

@code {
  private List<FileSystemItem> files = new();
  private string errorMessage = string.Empty;
  private bool isLoading = false;

  [Parameter] public bool AutoLoad { get; set; } = true;
  [Parameter] public bool Dense { get; set; } = true;
  [Parameter] public EventCallback OnFilesChanged { get; set; }

  [Parameter] public string? CurrentPath { get; set; }

  private string _currentDirectory = DirectoryBrowser.DownloadsPath;

  private HashSet<FileSystemItem> SelectedItems = new HashSet<FileSystemItem>();

  private List<BreadcrumbItem> breadcrumbsItems = new();

  protected override async Task OnInitializedAsync()
  {
    if (AutoLoad)
    {
      if (!string.IsNullOrEmpty(CurrentPath))
      {
        _currentDirectory = CurrentPath; // Use parameter if provided
      }
      await LoadFiles();
      UpdateBreadcrumbs();
    }
  }

  public async Task LoadFiles()
  {
    try
    {
      isLoading = true;
      errorMessage = string.Empty;
      files = FileManagerService.GetFiles(_currentDirectory);
      
      // Refresh short links for all files
      ShortLinkService.RefreshShortLinks(files);
      
      await OnFilesChanged.InvokeAsync();
    }
    catch (Exception ex)
    {
      errorMessage = $"Error loading files: {ex.Message}";
    }
    finally
    {
      isLoading = false;
      await InvokeAsync(StateHasChanged);
    }
  }

  private string GetShortLink(FileItem file)
  {
    return ShortLinkService.GetShortLink(file.FullName);
  }

  private void UpdateBreadcrumbs()
  {
    breadcrumbsItems.Clear();
    var pathParts = _currentDirectory.Substring(DirectoryBrowser.DownloadsPath.Length).Split(Path.DirectorySeparatorChar, StringSplitOptions.RemoveEmptyEntries);
    string currentPath = DirectoryBrowser.DownloadsPath;

    breadcrumbsItems.Add(new BreadcrumbItem("Downloads", href: currentPath, disabled: true));

    foreach (var part in pathParts)
    {
      currentPath = Path.Combine(currentPath, part);
      var localPath = currentPath;
      breadcrumbsItems.Add(new BreadcrumbItem(part, href: localPath));
    }
  }

  private async Task NavigateToDirectory(string? path)
  {
    if (path is null) path = DirectoryBrowser.DownloadsPath;
    _currentDirectory = path;
    await LoadFiles();
    UpdateBreadcrumbs();
  }

  private async Task DeleteFile(FileItem item)
  {
    try
    {
      FileManagerService.DeleteFile(item);
      await LoadFiles();
    }
    catch (Exception ex)
    {
      errorMessage = $"Error deleting file: {ex.Message}";
    }
  }

  private async Task DeleteSelected()
  {
    try
    {
      foreach (var item in SelectedItems)
      {
        if (item is FileItem fileItem)
        {
          FileManagerService.DeleteFile(fileItem);
        }
        else if (item is DirectoryItem directoryItem)
        {
          FileManagerService.DeleteDirectory(directoryItem);
        }
      }
      SelectedItems.Clear();
      await LoadFiles();
    }
    catch (Exception ex)
    {
      errorMessage = $"Error deleting selected items: {ex.Message}";
    }
  }

  private async Task DeleteDirectory(DirectoryItem item)
  {
    try
    {
      FileManagerService.DeleteDirectory(item);
      await LoadFiles();
    }
    catch (Exception ex)
    {
      errorMessage = $"Error deleting directory: {ex.Message}";
    }
  }

  private bool IsMediaFile(string fileName)
  {
    var ext = Path.GetExtension(fileName).ToLowerInvariant();
    return new[] { ".mp4", ".webm", ".avi", ".mov", ".mkv", ".mp3", ".wav", ".ogg", ".m4a", ".flac", ".opus" }
        .Contains(ext);
  }

  private Task OpenMediaDialog(FileItem fileItem)
  {
    var isVideo = new[] { ".mp4", ".webm", ".avi", ".mov", ".mkv" }
        .Contains(Path.GetExtension(fileItem.Name).ToLowerInvariant());

    var shortLink = ShortLinkService.GetShortLink(fileItem.FullName);

    var parameters = new DialogParameters<MediaDialog>
        {
            {x=>x.MediaUrl, $"/s/{shortLink}"},
            {x=>x.IsVideo, isVideo},
            {x=>x.IsAudio, !isVideo}
        };

    var options = new DialogOptions
    {
      BackgroundClass = "my-custom-media-dialog",
      CloseButton = true
    };

    return DialogService.ShowAsync<MediaDialog>("", parameters, options);
  }

  public async Task RefreshFiles()
  {
    await LoadFiles();
  }

  private async Task RenameItem(FileSystemItem item)
  {
    var parameters = new DialogParameters<RenameDialog>
    {
        { x => x.OriginalName, item.Name }
    };
    
    var dialog = await DialogService.ShowAsync<RenameDialog>("Rename", parameters);
    var result = await dialog.Result;
    
    if (!result.Canceled && result.Data is string newName && !string.IsNullOrWhiteSpace(newName))
    {
      try
      {
        if (FileManagerService.RenameItem(item, newName))
        {
          await LoadFiles();
        }
        else
        {
          errorMessage = "Failed to rename item. The name may be invalid or already exists.";
        }
      }
      catch (Exception ex)
      {
        errorMessage = $"Error renaming item: {ex.Message}";
      }
    }
  }
}